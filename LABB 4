; --- lab4spel.asm

	.equ	VMEM_SZ     = 5		; #rows on display
	.equ	AD_CHAN_X   = 3		; ADC0=PA0, PORTA bit 0 X-led
	.equ	AD_CHAN_Y   = 4		; ADC1=PA1, PORTA bit 1 Y-led
	.equ	GAME_SPEED  = 70	; inter-run delay (millisecs)
	.equ	PRESCALE    = 7		; AD-prescaler value
	.equ	BEEP_PITCH  = 20	; Victory beep pitch
	.equ	BEEP_LENGTH = 100	; Victory beep length
	.equ    MS        =  255; WAIT
	; ---------------------------------------
	; --- Memory layout in SRAM
	.dseg
	.org	SRAM_START
POSX:	.byte	1	; Own position
POSY:	.byte 	1
TPOSX:	.byte	1	; Target position
TPOSY:	.byte	1
LINE:	.byte	1	; Current line	
VMEM:	.byte	VMEM_SZ ; Video MEMory
SEED:	.byte	1	; Seed for Random

	; ---------------------------------------
	; --- Macros for inc/dec-rementing
	; --- a byte in SRAM
	.macro INCSRAM	; inc byte in SRAM
		lds	r16,@0
		inc	r16
		sts	@0,r16
	.endmacro

	.macro DECSRAM	; dec byte in SRAM
		lds	r16,@0
		dec	r16
		sts	@0,r16
	.endmacro

	; ---------------------------------------
	; --- Code
	.cseg
	.org 	$0
	jmp	START
	.org	INT0addr
	jmp	AVBROTT_0


START:
	ldi r16,HIGH(RAMEND); sätt stackpekaren
	out SPH,r16
	ldi r16, LOW(RAMEND)
	out SPL,r16
			
	call	HW_INIT	
	call	WARM


RUN:
	call	JOYSTICK
	call	ERASE_VMEM
	call	UPDATE
	call	 WAIT   ; våran delay som går igenom 70 millisekunder

	lds      r20, POSX ; Laddar in våra positioner samt datorns positioner
	lds      r21, POSY
	lds      r22,TPOSX
	lds      r23,TPOSY

		cp r20,r22  ;*** 	Vänta en stund så inte spelet går för fort 	**** 	Avgör om träff				 	*
		brne NO_HIT
		cp r21,r23 ; Jämför våran position i både x-led och y-led

	brne	NO_HIT	
	ldi		r16,BEEP_LENGTH
	call	BEEP
	call	WARM


HW_INIT:


	ldi r16,(1<<ISC01)|(1<<ISC00) ;*** 	flanktriggat avbrott på INT0 (PD2).			*
	

	out MCUCR,r16

	ldi r16,(1<<INT0)
	out GICR,r16
	
	ldi r16, 0xFF ;*** 	Konfigurera hårdvara och MUX-avbrott enligt *
	out DDRB, r16 ;*** 	ditt elektriska schema. Konfigurera 		*

	ldi r16, 0x07
	out DDRD, r16


	ldi r16,(1<<ADEN) ; Sätter en etta på AD enable "7"
	ori r16,PRESCALE; Takten på omvandlingen
	out ADCSRA,r16 

	sei			; display on
	ret


AVBROTT_0:
	push r16
	in r16,SREG 
	call MUX
	out SREG,r16
	pop r16
	reti


WAIT:

	ldi		r25,HIGH(MS)
	ldi		r24,LOW(MS)
	

WAIT_LOOP: 
	sbiw	r24,1
	brne	WAIT_LOOP
	ret
	


NO_HIT:
	jmp	RUN

	; ---------------------------------------
	; --- Multiplex display

MUX:
	push ZH
	push ZL ; * 	skriv rutin som handhar multiplexningen och *
	push XH ; *   utskriften till diodmatrisen. Öka SEED.		*
	push XL

	ldi ZL, LOW(LINE)
	ldi ZH, HIGH(LINE)

	ld r16, Z ; laddar in platsen från SRAM
	out PORTD, r16 ; Matar ut siffran


	ldi XL, LOW(VMEM)
	ldi XH, HIGH(VMEM)

	add XL, r16
	ld  r16, Z
	out PORTB, r16

	ldi XL, LOW(LINE)
	ldi XH, HIGH(LINE)
	ld r16, X
	inc r16
	cpi r16, VMEM_SZ
	brne MUX_KLAR
	clr r16

	INCSRAM SEED
	
	

	;SEED?


	reti

MUX_KLAR:
	st Z, r16
	pop ZH
	pop ZL
	pop XH
	pop XL

	ret
		
	; ---------------------------------------
	; --- JOYSTICK Sense stick and update POSX, POSY
	; --- Uses r16
MOVE_X:
	ldi		r16, AD_CHAN_X
	call	CONVERT
	cpi		r16,$03
	breq	INC_X
	cpi		r16, $00
	breq	DEC_X
	ret
DEC_X:
	INCSRAM		POSX
	ret
INC_X:
	DECSRAM		POSX
	ret
	
MOVE_Y:
	ldi r16, AD_CHAN_Y 
	call CONVERT
	cpi r16, $03
	breq INC_Y
	cpi r16,$00
	breq DEC_Y
	ret
INC_Y:
	INCSRAM POSY
	ret
DEC_Y:
	DECSRAM POSY
	ret

CONVERT:
	out		ADMUX,r16
	sbi		ADCSRA,ADSC       ; starta en omvandling
CONVERT_WAIT:
	sbic	ADCSRA,ADSC       ; om nollställd är vi klarar
	jmp		CONVERT_WAIT              ; annars testa busy-biten igen
	in		r16,ADCH          ; hög byte sedan
	ret	

JOYSTICK:
	rcall	MOVE_X
	rcall	MOVE_Y

JOY_LIM:
	call	LIMITS		; don't fall off world!
	ret

	; ---------------------------------------
	; --- LIMITS Limit POSX,POSY coordinates	
	; --- Uses r16,r17
LIMITS:
	lds	r16,POSX	; variable
	ldi	r17,7		; upper limit+1
	call	POS_LIM		; actual work
	sts	POSX,r16
	lds	r16,POSY	; variable
	ldi	r17,5		; upper limit+1
	call	POS_LIM		; actual work
	sts	POSY,r16
	ret

POS_LIM:
	ori	r16,0		; negative?
	brmi	POS_LESS	; POSX neg => add 1
	cp	r16,r17		; past edge
	brne	POS_OK
	subi	r16,2


POS_LESS:
	inc	r16
		
POS_OK:
	ret

	; ---------------------------------------
	; --- UPDATE VMEM
	; --- with POSX/Y, TPOSX/Y
	; --- Uses r16, r17
UPDATE:	
	clr	ZH 
	ldi	ZL,LOW(POSX)
	call 	SETPOS
	clr	ZH
	ldi	ZL,LOW(TPOSX)
	call	SETPOS
	ret

	; --- SETPOS Set bit pattern of r16 into *Z
	; --- Uses r16, r17
	; --- 1st call Z points to POSX at entry and POSY at exit
	; --- 2nd call Z points to TPOSX at entry and TPOSY at exit
SETPOS:
	ld	r17,Z+  	; r17=POSX
	call	SETBIT		; r16=bitpattern for VMEM+POSY
	ld	r17,Z		; r17=POSY Z to POSY
	ldi	ZL,LOW(VMEM)
	add	ZL,r17		; *(VMEM+T/POSY) ZL=VMEM+0..4
	ld	r17,Z		; current line in VMEM
	or	r17,r16		; OR on place
	st	Z,r17		; put back into VMEM
	ret
	
	; --- SETBIT Set bit r17 on r16
	; --- Uses r16, r17
SETBIT:
	ldi	r16,$01		; bit to shift
SETBIT_LOOP:
	dec 	r17			
	brmi 	SETBIT_END	; til done
	lsl 	r16		; shift
	jmp 	SETBIT_LOOP

SETBIT_END:
	ret

	; ---------------------------------------
	; --- Hardware init
	; --- Uses r16





	; ---------------------------------------
	; --- WARM start. Set up a new game
WARM:

;*** 	Sätt startposition (POSX,POSY)=(0,2)		*
;*** Satt startposition ( POSX , POSY )=(0 ,2) *


		ldi r16, $00    ; Set starting xposition to 0
		sts POSX, r16   ; Write to SRAM posx
		ldi r16, $02    ; Set starting uposition to 2
		sts POSY, r16   ; Write to SRAM posy

		push r0
		push r0
		call RANDOM 

;*** RANDOM returns TPOSX, TPOSY on stack *
;*** Satt startposition ( TPOSX , TPOSY ) *
		
		pop r16
		sts TPOSX, r16  ; Store x value from stack
		pop r16
		sts TPOSY, r16	; Store y value from stack

		call ERASE_VMEM
    
		ret
	; ---------------------------------------
	; --- RANDOM generate TPOSX, TPOSY
	; --- in variables passed on stack.
	; --- Usage as:
	; ---	push r0 
	; ---	push r0 
	; ---	call RANDOM
	; ---	pop TPOSX 
	; ---	pop TPOSY
	; --- Uses r16
RANDOM:
        push r16
		push ZL
		push ZH
		in r16, SPH
		mov ZH, r16
		in r16, SPL
		mov ZL, r16

		lds r16, SEED
		andi   r16,$07

		;;kör på seed för att beräkna TPOSX

		cpi	r16,4
		brpl CONTROL_TPOSX
		subi r16,-4


CONTROL_TPOSX:
		cpi   r16, 7
		brne  LAGER_T
		dec   r16


LAGER_T:
	std  Z+6,r16
	





lds r16,SEED

CONTROL_Y:
		andi r16 , 7
		cpi  r16, $05       ; Is random lower than 5?
		brmi Y_KLAR     
		subi r16,3
Y_KLAR:
        std Z+7, r16        ; store POSY to stack
		pop r16
		pop ZH
		pop ZL

ret


	; ---------------------------------------
	; --- Erase Videomemory bytes
	; --- Clears VMEM..VMEM+4
	
ERASE_VMEM:
;*** 	Radera videominnet						*
push r16
push r17
push XL
push XH

	ldi XH, HIGH(VMEM)
	ldi XL, LOW(VMEM)

ldi r16,0
ldi r17,0

E_LOOP:
st X+,r16
inc r17
cpi r17,5 ; när vi laddat alla med noll
brne E_LOOP

	ret

	; ---------------------------------------
	; --- BEEP(r16) r16 half cycles of BEEP-PITCH

BEEP:
	ldi		r16,BEEP_LENGTH ; 100 long
BEEP_LOOP:
	sbi		PORTB, 7
	call	DELAY
	cbi		PORTB, 7
	call	DELAY
	dec		r16
	brne	BEEP_LOOP

	ret

DELAY:
	ldi		r25,HIGH(BEEP_PITCH)
	ldi		r24,LOW(BEEP_PITCH)
DELAY_LOOP: 
	sbiw	r24,1
	brne	DELAY_LOOP
	ret
